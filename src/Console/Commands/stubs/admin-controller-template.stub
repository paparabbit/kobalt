<?php

namespace App\Http\Controllers\Admin;

use App\Http\Forms\Admin\{{name}}Form;
use App\Http\Requests\{{name}}Request;
use App\{{name}};
use Hoppermagic\Kobalt\Controllers\AdminController;
use Hoppermagic\Kobalt\Facades\FormHelper;
use Hoppermagic\Kobalt\Facades\ImageHelper;
use Hoppermagic\Kobalt\Facades\KobaltStorage;

//use Hoppermagic\Kobalt\ImageGalleryTrait;


class {{name}}Controller extends AdminController
{
//    use ImageGalleryTrait;
    /**
     * ProjectsController constructor.
     */
    public function __construct({{name}} {{name}})
    {
        $this->middleware('auth');
        $this->back_link = route('admin.XXXXXXXX.index');
        $this->title = '{{name}}';
        $this->model = ${{name}};
        $this->form_class = {{name}}Form::class;
    }



    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $resources = {{name}}::orderBy('sort_on', 'asc')->get();

        return $this->getOverviewView($resources);
    }



    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $create_form = FormHelper::generateCreateForm($this->form_class,
            array(
                // Data for nested views
            ),array(
                // Hide these fields
            )
        );

        return $this->getCreateView($create_form);
    }



    /**
     * Store a newly created resource.
     *
     * @param {{name}}Request $request
     * @return \Illuminate\Http\Response
     */
    public function store({{name}}Request $request)
     {
        // Add the extension
        //$extension_array = ImageHelper::generateExtensionArray($request);

        $resource = $this->storeResource($request /*,$extension_array*/ );

         // Store files after the resource has been saved as we can pull the image meta from the resource
         //KobaltStorage::storeImages($request, $resource, $this->generateThumbnailIgnoreList($request));

         return redirect()->route('admin.XXXXXXXXX.edit', $resource);
    }



    /**
     * Show the form for editing the specified resource.
     *
     * @param {{name}} ${{resource}}
     * @return \Illuminate\Http\Response
     * @internal param int $id
     */
    public function edit({{name}} ${{resource}})
    {
        // Make up image previews
        //$image_preview_array = ImageHelper::generateImageArray(
            //array(
                //'computerimage' => ${{resource}}->XXXXXXXXXXX_thumbnail_path,
                //'overviewimage' => ${{resource}}->XXXXXXXXXXX_thumbnail_path
            //)
        //);


        // For the has many images

        //$images = json_encode(${{resource}}->images->toArray());
        //$nested_image_view =  $this->generateNestedImageView($images, 'workimage');


        $edit_form = FormHelper::generateEditForm($this->form_class, array(
            // Data for the has one
            //'testimonial' => Testimonials::pluck('name','id')->toArray(),
            //'testimonial_selected' => ${{resource}}->getTestimonial(),
            // Data for the Has many images
            //'nested_image_view' => $nested_image_view,
        )/*+ $image_preview_array*/);


        return $this->getEditView($edit_form);
    }



    /**
     * Update the specified resource in storage.
     *
     * @param {{name}} ${{resource}}
     * @param {{name}}Request $request
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update({{name}} ${{resource}}, {{name}}Request $request)
    {
        //KobaltStorage::updateStoredImages($request, $project, $this->generateThumbnailIgnoreList($request));

        //$extension_array = ImageHelper::generateExtensionArray($request);

        $resource = $this->updateResource(${{resource}}, $request /*, $extension_array*/);

        return redirect()->route('admin.XXXXXXXX.edit', $resource);
    }



    /**
     * Confirm delete page
     *
     * @return $this
     */
    public function confirmDelete(){

        return $this->getConfirmDeleteView();
    }



    /**
     * Remove the specified resource from storage.
     *
     * @param {{name}} ${{resource}}
     * @return \Illuminate\Http\Response
     */
    public function destroy({{name}} ${{resource}})
    {
        ${{resource}}->delete();
        return redirect('admin/XXXXXXXX');
    }



    //    /**
    //     * AJAX call when sorting the images
    //     */
    //    public function imageGallerySort()
    //    {
    //        $ids = $_POST['ids'];
    //
    //        return $this->sortImages(Projectimage::class, $ids);
    //    }
    //
    //
    //
    //    /**
    //     * AJAX call when lightbox has closed and we need to refresh
    //     * the image grid
    //     */
    //    public function imageGalleryLoad()
    //    {
    //        $id = $_POST['resource_id'];
    //
    //        return $this->loadImages(Project::class, 'images', $id);
    //    }
}
